{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/main/new_frontend/src/routes/Route.tsx\";\nimport React, { useCallback } from 'react';\nimport { Route as ReactDOMRoute, Redirect } from 'react-router-dom';\nimport { useAuth } from '../hooks/auth';\n\nconst Route = ({\n  isPrivate = false,\n  component: Component,\n  needPermissions,\n  ...rest\n}) => {\n  const {\n    user\n  } = useAuth();\n  const checkForPermissions = useCallback(() => {\n    let authorized = false;\n\n    if (needPermissions) {\n      needPermissions.forEach(permiss => {\n        if (user.profile[permiss]) {\n          authorized = true;\n        }\n      });\n    } else {\n      authorized = true;\n    }\n\n    return authorized;\n  }, [needPermissions, user]);\n  return /*#__PURE__*/React.createElement(ReactDOMRoute, Object.assign({}, rest, {\n    render: ({\n      location\n    }) => {\n      return isPrivate === !!user && checkForPermissions() ? /*#__PURE__*/React.createElement(Component, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }) : /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: isPrivate ? '/' : '/dashboard',\n          state: {\n            from: location\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Route;","map":{"version":3,"sources":["/home/ondaniel/santiago/main/new_frontend/src/routes/Route.tsx"],"names":["React","useCallback","Route","ReactDOMRoute","Redirect","useAuth","isPrivate","component","Component","needPermissions","rest","user","checkForPermissions","authorized","forEach","permiss","profile","location","pathname","state","from"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAEEC,KAAK,IAAIC,aAFX,EAGEC,QAHF,QAIO,kBAJP;AAMA,SAASC,OAAT,QAAwB,eAAxB;;AAiBA,MAAMH,KAA2B,GAAG,CAAC;AACnCI,EAAAA,SAAS,GAAG,KADuB;AAEnCC,EAAAA,SAAS,EAAEC,SAFwB;AAGnCC,EAAAA,eAHmC;AAInC,KAAGC;AAJgC,CAAD,KAK9B;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAWN,OAAO,EAAxB;AAEA,QAAMO,mBAAmB,GAAGX,WAAW,CAAC,MAAM;AAC5C,QAAIY,UAAU,GAAG,KAAjB;;AAEA,QAAIJ,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACK,OAAhB,CAAwBC,OAAO,IAAI;AACjC,YAAIJ,IAAI,CAACK,OAAL,CAAaD,OAAb,CAAJ,EAA2B;AACzBF,UAAAA,UAAU,GAAG,IAAb;AACD;AACF,OAJD;AAKD,KAND,MAMO;AACLA,MAAAA,UAAU,GAAG,IAAb;AACD;;AAED,WAAOA,UAAP;AACD,GAdsC,EAcpC,CAACJ,eAAD,EAAkBE,IAAlB,CAdoC,CAAvC;AAgBA,sBACE,oBAAC,aAAD,oBACMD,IADN;AAEE,IAAA,MAAM,EAAE,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAkB;AACxB,aAAOX,SAAS,KAAK,CAAC,CAACK,IAAhB,IAAwBC,mBAAmB,EAA3C,gBACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,gBAGL,oBAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFM,UAAAA,QAAQ,EAAEZ,SAAS,GAAG,GAAH,GAAS,YAD1B;AAEFa,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEH;AAAR;AAFL,SADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF;AAUD,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAiBD,CAzCD;;AA2CA,eAAef,KAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  RouteProps as ReactDOMRouteProps,\n  Route as ReactDOMRoute,\n  Redirect,\n} from 'react-router-dom';\n\nimport { useAuth } from '../hooks/auth';\n\ninterface RouteProps extends ReactDOMRouteProps {\n  isPrivate?: boolean;\n  component: React.ComponentType;\n  needPermissions?: (\n    | 'new_enrollment_permiss'\n    | 'validate_enrollment_permiss'\n    | 'pay_debit_permiss'\n    | 'discharge_payment_permiss'\n    | 'crud_profiles_permiss'\n    | 'crud_users_permiss'\n    | 'crud_grades_permiss'\n    | 'create_extra_debit_permiss'\n  )[];\n}\n\nconst Route: React.FC<RouteProps> = ({\n  isPrivate = false,\n  component: Component,\n  needPermissions,\n  ...rest\n}) => {\n  const { user } = useAuth();\n\n  const checkForPermissions = useCallback(() => {\n    let authorized = false;\n\n    if (needPermissions) {\n      needPermissions.forEach(permiss => {\n        if (user.profile[permiss]) {\n          authorized = true;\n        }\n      });\n    } else {\n      authorized = true;\n    }\n\n    return authorized;\n  }, [needPermissions, user]);\n\n  return (\n    <ReactDOMRoute\n      {...rest}\n      render={({ location }) => {\n        return isPrivate === !!user && checkForPermissions() ? (\n          <Component />\n        ) : (\n          <Redirect\n            to={{\n              pathname: isPrivate ? '/' : '/dashboard',\n              state: { from: location },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default Route;\n"]},"metadata":{},"sourceType":"module"}