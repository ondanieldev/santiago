{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/sisgie-frontend/src/hooks/aside.tsx\";\nimport React, { createContext, useCallback, useState, useContext } from 'react';\nconst AsideContext = createContext({});\nexport const AsideProvider = ({\n  children\n}) => {\n  const [show, setShow] = useState(window.innerWidth >= 900);\n  const toggle = useCallback(() => {\n    setShow(!show);\n  }, [show]);\n  return /*#__PURE__*/React.createElement(AsideContext.Provider, {\n    value: {\n      show,\n      toggle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useAside = () => {\n  const context = useContext(AsideContext);\n\n  if (!context) {\n    throw new Error('useAside must be used within an AsideContext Provider');\n  }\n\n  return context;\n};","map":{"version":3,"sources":["/home/ondaniel/santiago/sisgie-frontend/src/hooks/aside.tsx"],"names":["React","createContext","useCallback","useState","useContext","AsideContext","AsideProvider","children","show","setShow","window","innerWidth","toggle","useAside","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsDC,UAAtD,QAAwE,OAAxE;AAOA,MAAMC,YAAY,GAAGJ,aAAa,CAAmB,EAAnB,CAAlC;AAEA,OAAO,MAAMK,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACO,MAAM,CAACC,UAAP,IAAqB,GAAtB,CAAhC;AAEA,QAAMC,MAAM,GAAGV,WAAW,CAAC,MAAM;AAC/BO,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFyB,EAEvB,CAACA,IAAD,CAFuB,CAA1B;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAF;AAAQI,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD,CAZM;AAcP,OAAO,MAAMM,QAAQ,GAAG,MAAwB;AAC9C,QAAMC,OAAO,GAAGV,UAAU,CAACC,YAAD,CAA1B;;AAEA,MAAI,CAACS,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD,CARM","sourcesContent":["import React, { createContext, useCallback, useState, useContext } from 'react';\n\ninterface AsideContextData {\n  show: boolean;\n  toggle(): void;\n}\n\nconst AsideContext = createContext<AsideContextData>({} as AsideContextData);\n\nexport const AsideProvider: React.FC = ({ children }) => {\n  const [show, setShow] = useState(window.innerWidth >= 900);\n\n  const toggle = useCallback(() => {\n    setShow(!show);\n  }, [show]);\n\n  return (\n    <AsideContext.Provider value={{ show, toggle }}>\n      {children}\n    </AsideContext.Provider>\n  );\n};\n\nexport const useAside = (): AsideContextData => {\n  const context = useContext(AsideContext);\n\n  if (!context) {\n    throw new Error('useAside must be used within an AsideContext Provider');\n  }\n\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}