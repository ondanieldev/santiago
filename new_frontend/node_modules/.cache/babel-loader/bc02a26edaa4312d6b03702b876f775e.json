{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/sisgie-frontend/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport ReactInputMask from 'react-input-mask';\nimport { Container, InputContainer, Error } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  autoComplete = 'off',\n  id,\n  label,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    error,\n    registerField\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isErrored, setIsErrored] = useState(false);\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n    setIsErrored(false);\n  }, []);\n  const handleBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, inputRef, registerField]);\n  useEffect(() => {\n    setIsErrored(!!error);\n  }, [error]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, label && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, label), /*#__PURE__*/React.createElement(InputContainer, {\n    isErrored: isErrored,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(ReactInputMask, Object.assign({\n    autoComplete: autoComplete,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    name: name,\n    ref: inputRef,\n    id: id\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), isErrored && error && /*#__PURE__*/React.createElement(Error, {\n    title: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#f44336\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/ondaniel/santiago/sisgie-frontend/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","ReactInputMask","Container","InputContainer","Error","Input","name","icon","Icon","autoComplete","id","label","rest","inputRef","fieldName","error","registerField","isFocused","setIsFocused","isFilled","setIsFilled","isErrored","setIsErrored","handleFocus","handleBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,cAAP,MAAwD,kBAAxD;AAEA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,KAApC,QAAiD,UAAjD;;AASA,MAAMC,KAA2B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,IAAI,EAAEC,IAF6B;AAGnCC,EAAAA,YAAY,GAAG,KAHoB;AAInCC,EAAAA,EAJmC;AAKnCC,EAAAA,KALmC;AAMnC,KAAGC;AANgC,CAAD,KAO9B;AACJ,QAAMC,QAAQ,GAAGjB,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM;AAAEkB,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAAsChB,QAAQ,CAACM,IAAD,CAApD;AAEA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM0B,WAAW,GAAGzB,WAAW,CAAC,MAAM;AACpCoB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAH8B,EAG5B,EAH4B,CAA/B;AAKA,QAAME,UAAU,GAAG1B,WAAW,CAAC,MAAM;AAAA;;AACnCoB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,CAAC,uBAACP,QAAQ,CAACY,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKA/B,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa,CAAC;AACZV,MAAAA,IAAI,EAAEQ,SADM;AAEZa,MAAAA,GAAG,EAAEd,QAAQ,CAACY,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACd,SAAD,EAAYD,QAAZ,EAAsBG,aAAtB,CANM,CAAT;AAQArB,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,YAAY,CAAC,CAAC,CAACP,KAAH,CAAZ;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,iBAAI;AAAO,IAAA,OAAO,EAAED,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBC,KAArB,CADZ,eAEE,oBAAC,cAAD;AACE,IAAA,SAAS,EAAEU,SADb;AAEE,IAAA,QAAQ,EAAEF,QAFZ;AAGE,IAAA,SAAS,EAAEF,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGT,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALX,eAME,oBAAC,cAAD;AACE,IAAA,YAAY,EAAEC,YADhB;AAEE,IAAA,OAAO,EAAEc,WAFX;AAGE,IAAA,MAAM,EAAEC,UAHV;AAIE,IAAA,IAAI,EAAElB,IAJR;AAKE,IAAA,GAAG,EAAEO,QALP;AAME,IAAA,EAAE,EAAEH;AANN,KAOME,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANF,EAeGS,SAAS,IAAIN,KAAb,iBACC,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBJ,CAFF,CADF;AA0BD,CAhED;;AAkEA,eAAeV,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport ReactInputMask, { Props as InputMaskProps } from 'react-input-mask';\n\nimport { Container, InputContainer, Error } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n  search?: boolean;\n  label?: string;\n}\n\nconst Input: React.FC<InputProps> = ({\n  name,\n  icon: Icon,\n  autoComplete = 'off',\n  id,\n  label,\n  ...rest\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, error, registerField } = useField(name);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isErrored, setIsErrored] = useState(false);\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n    setIsErrored(false);\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, inputRef, registerField]);\n\n  useEffect(() => {\n    setIsErrored(!!error);\n  }, [error]);\n\n  return (\n    <Container>\n      {label && <label htmlFor={id}>{label}</label>}\n      <InputContainer\n        isErrored={isErrored}\n        isFilled={isFilled}\n        isFocused={isFocused}\n      >\n        {Icon && <Icon size={20} />}\n        <ReactInputMask\n          autoComplete={autoComplete}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          name={name}\n          ref={inputRef}\n          id={id}\n          {...rest}\n        />\n        {isErrored && error && (\n          <Error title={error}>\n            <FiAlertCircle color=\"#f44336\" size={20} />\n          </Error>\n        )}\n      </InputContainer>\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}