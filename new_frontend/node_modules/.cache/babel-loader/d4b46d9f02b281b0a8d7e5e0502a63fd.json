{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/main/new_frontend/src/pages/PayDebitsByContract/index.tsx\";\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Form } from '@unform/web';\nimport { FiDollarSign } from 'react-icons/fi';\nimport { ValidationError as YupValidationError } from 'yup';\nimport { toast } from 'react-toastify';\nimport { isPast, differenceInCalendarMonths, parseISO } from 'date-fns';\nimport { Container, Main, InputGroup, Debit } from './styles';\nimport { paymentMethods } from '../../utils/defaults';\nimport Loading from '../../components/Loading';\nimport Title from '../../components/Title';\nimport Table from '../../components/Table';\nimport Header from '../../components/Header';\nimport Aside from '../../components/Aside';\nimport Select from '../../components/SelectInput';\nimport Button from '../../components/Button';\nimport Popup from '../../components/Popup';\nimport Document from '../../components/Document';\nimport api from '../../services/api';\nimport paymentSchema from '../../schemas/paymentSchema';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport { prettyDate, formatCoin } from '../../utils/formatFunctions';\ntoast.configure();\n\nconst Debits = () => {\n  const formRef = useRef(null);\n  const {\n    contract_id\n  } = useParams();\n  const [debits, setDebits] = useState([]);\n  const [selectedDebit, setSelectedDebit] = useState({});\n  const [payment, setPayment] = useState({});\n  const [loadingPage, setLoadingPage] = useState(false);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n  useEffect(() => {\n    setLoadingPage(true);\n    api.get(`contracts/${contract_id}/debits`).then(response => {\n      const debitsFromApi = response.data;\n      debitsFromApi.forEach(debit => {\n        const parsedDebitDate = parseISO(debit.payment_limit_date.toString());\n        let true_value = debit.value;\n\n        if (isPast(parsedDebitDate)) {\n          const months = differenceInCalendarMonths(new Date(), parsedDebitDate);\n          true_value = debit.value * 1.03 ** months;\n        } else {\n          true_value = debit.value - debit.value * debit.discount / 100;\n        }\n\n        Object.assign(debit, {\n          true_value\n        });\n      });\n      setDebits(response.data);\n    }).catch(() => {\n      toast.error('Erro ao carregar débitos! Por favor, tente novamente mais tarde.');\n    }).finally(() => {\n      setLoadingPage(false);\n    });\n  }, [contract_id]);\n  const handlePayDebit = useCallback(async data => {\n    if (loadingSubmit) {\n      return;\n    }\n\n    setLoadingSubmit(true);\n\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      await paymentSchema.validate(data, {\n        abortEarly: false\n      });\n      const apiUrl = selectedDebit.type === 'enrollment' ? '/payments/enrollment' : '/payments';\n      const response = await api.post(apiUrl, {\n        debit_id: selectedDebit.id,\n        method: data.method\n      });\n      const paymentData = response.data;\n      setPayment(paymentData);\n      const debitsList = debits;\n      debitsList.forEach(debit => {\n        if (debit.id === selectedDebit.id) {\n          Object.assign(debit, {\n            paid: true,\n            payment: paymentData\n          });\n        }\n      });\n      setDebits(debitsList);\n      toast.success('Débito pago com sucesso!');\n\n      if (selectedDebit.type === 'enrollment') {\n        const newDebits = await api.get(`contracts/${contract_id}/debits`);\n        const debitsFromApi = newDebits.data;\n        debitsFromApi.forEach(debit => {\n          const parsedDebitDate = parseISO(debit.payment_limit_date.toString());\n          let true_value = debit.value;\n\n          if (isPast(parsedDebitDate)) {\n            const months = differenceInCalendarMonths(new Date(), parsedDebitDate);\n            true_value = debit.value * 1.03 ** months;\n          } else {\n            true_value = debit.value - debit.value * debit.discount / 100;\n          }\n\n          Object.assign(debit, {\n            true_value\n          });\n        });\n        setDebits(newDebits.data);\n      }\n    } catch (err) {\n      if (err instanceof YupValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      if (err.response) {\n        toast.error(`Erro ao pagar débito: ${err.response.data.message}`);\n      } else {\n        toast.error(`Erro ao pagar débito! Por favor, tente novamente mais tarde.`);\n      }\n    } finally {\n      setLoadingSubmit(false);\n    }\n  }, [selectedDebit, debits, loadingSubmit, contract_id]);\n  const handleClosePopup = useCallback(() => {\n    setSelectedDebit({});\n    setPayment({});\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Loading, {\n    show: loadingPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Aside, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    title: \"Pagar d\\xE9bitos\",\n    subtitle: `Contrato #${contract_id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    isVoid: debits.length <= 0,\n    voidMessage: \"N\\xE3o h\\xE1 d\\xE9bitos para serem pagos!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }, \"Descri\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, \"Valor\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, \"Valor com varia\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, \"Data limite do pagamento\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, \"Data de pagamento\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, debits.map(debit => /*#__PURE__*/React.createElement(Debit, {\n    paid: debit.paid,\n    key: debit.id,\n    onClick: () => setSelectedDebit(debit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, debit.description), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, formatCoin(debit.value)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, debit.true_value ? formatCoin(debit.true_value) : debit.value), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, prettyDate(debit.payment_limit_date)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, debit.payday ? prettyDate(debit.payday) : '-'))))), !!selectedDebit.id && /*#__PURE__*/React.createElement(Popup, {\n    title: `Débito: ${selectedDebit.true_value ? formatCoin(selectedDebit.true_value) : formatCoin(selectedDebit.value)}`,\n    handleClosePopup: handleClosePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, !payment.id && !selectedDebit.paid && /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handlePayDebit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"method\",\n    icon: FiDollarSign,\n    optionsArray: paymentMethods,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    loading: loadingSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, \"Pagar\")), (payment.receipt_url || selectedDebit.payment && selectedDebit.payment.receipt_url) && /*#__PURE__*/React.createElement(Document, {\n    name: \"Recibo\",\n    link: payment.receipt_url || selectedDebit.payment.receipt_url || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 15\n    }\n  }))));\n};\n\nexport default Debits;","map":{"version":3,"sources":["/home/ondaniel/santiago/main/new_frontend/src/pages/PayDebitsByContract/index.tsx"],"names":["React","useEffect","useState","useCallback","useRef","useParams","Form","FiDollarSign","ValidationError","YupValidationError","toast","isPast","differenceInCalendarMonths","parseISO","Container","Main","InputGroup","Debit","paymentMethods","Loading","Title","Table","Header","Aside","Select","Button","Popup","Document","api","paymentSchema","getValidationErrors","prettyDate","formatCoin","configure","Debits","formRef","contract_id","debits","setDebits","selectedDebit","setSelectedDebit","payment","setPayment","loadingPage","setLoadingPage","loadingSubmit","setLoadingSubmit","get","then","response","debitsFromApi","data","forEach","debit","parsedDebitDate","payment_limit_date","toString","true_value","value","months","Date","discount","Object","assign","catch","error","finally","handlePayDebit","current","setErrors","validate","abortEarly","apiUrl","type","post","debit_id","id","method","paymentData","debitsList","paid","success","newDebits","err","errors","message","handleClosePopup","length","map","description","payday","receipt_url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport { FiDollarSign } from 'react-icons/fi';\nimport { ValidationError as YupValidationError } from 'yup';\nimport { toast } from 'react-toastify';\nimport { isPast, differenceInCalendarMonths, parseISO } from 'date-fns';\n\nimport { Container, Main, InputGroup, Debit } from './styles';\nimport { paymentMethods } from '../../utils/defaults';\nimport Loading from '../../components/Loading';\nimport Title from '../../components/Title';\nimport Table from '../../components/Table';\nimport Header from '../../components/Header';\nimport Aside from '../../components/Aside';\nimport Select from '../../components/SelectInput';\nimport Button from '../../components/Button';\nimport Popup from '../../components/Popup';\nimport Document from '../../components/Document';\nimport IDebit from '../../entities/IDebit';\nimport IPayment from '../../entities/IPayment';\nimport api from '../../services/api';\nimport paymentSchema from '../../schemas/paymentSchema';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport { prettyDate, formatCoin } from '../../utils/formatFunctions';\n\ninterface IFormData {\n  method: 'creditCard' | 'debitCard' | 'cash' | 'check' | 'deposit' | 'slip';\n}\n\ninterface IParams {\n  contract_id: string;\n}\n\ninterface IDebitWithVariation extends IDebit {\n  true_value?: number;\n}\n\ntoast.configure();\n\nconst Debits: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const { contract_id } = useParams<IParams>();\n\n  const [debits, setDebits] = useState([] as IDebitWithVariation[]);\n  const [selectedDebit, setSelectedDebit] = useState({} as IDebitWithVariation);\n  const [payment, setPayment] = useState({} as IPayment);\n  const [loadingPage, setLoadingPage] = useState(false);\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n\n  useEffect(() => {\n    setLoadingPage(true);\n    api\n      .get(`contracts/${contract_id}/debits`)\n      .then(response => {\n        const debitsFromApi = response.data;\n\n        debitsFromApi.forEach((debit: IDebitWithVariation) => {\n          const parsedDebitDate = parseISO(debit.payment_limit_date.toString());\n\n          let true_value = debit.value;\n\n          if (isPast(parsedDebitDate)) {\n            const months = differenceInCalendarMonths(\n              new Date(),\n              parsedDebitDate,\n            );\n\n            true_value = debit.value * 1.03 ** months;\n          } else {\n            true_value = debit.value - (debit.value * debit.discount) / 100;\n          }\n\n          Object.assign(debit, { true_value });\n        });\n\n        setDebits(response.data);\n      })\n      .catch(() => {\n        toast.error(\n          'Erro ao carregar débitos! Por favor, tente novamente mais tarde.',\n        );\n      })\n      .finally(() => {\n        setLoadingPage(false);\n      });\n  }, [contract_id]);\n\n  const handlePayDebit = useCallback(\n    async (data: IFormData) => {\n      if (loadingSubmit) {\n        return;\n      }\n\n      setLoadingSubmit(true);\n\n      try {\n        formRef.current?.setErrors({});\n\n        await paymentSchema.validate(data, {\n          abortEarly: false,\n        });\n\n        const apiUrl =\n          selectedDebit.type === 'enrollment'\n            ? '/payments/enrollment'\n            : '/payments';\n\n        const response = await api.post(apiUrl, {\n          debit_id: selectedDebit.id,\n          method: data.method,\n        });\n\n        const paymentData = response.data as IPayment;\n\n        setPayment(paymentData);\n\n        const debitsList = debits;\n\n        debitsList.forEach(debit => {\n          if (debit.id === selectedDebit.id) {\n            Object.assign(debit, {\n              paid: true,\n              payment: paymentData,\n            });\n          }\n        });\n\n        setDebits(debitsList);\n\n        toast.success('Débito pago com sucesso!');\n\n        if (selectedDebit.type === 'enrollment') {\n          const newDebits = await api.get(`contracts/${contract_id}/debits`);\n\n          const debitsFromApi = newDebits.data;\n\n          debitsFromApi.forEach((debit: IDebitWithVariation) => {\n            const parsedDebitDate = parseISO(\n              debit.payment_limit_date.toString(),\n            );\n\n            let true_value = debit.value;\n\n            if (isPast(parsedDebitDate)) {\n              const months = differenceInCalendarMonths(\n                new Date(),\n                parsedDebitDate,\n              );\n\n              true_value = debit.value * 1.03 ** months;\n            } else {\n              true_value = debit.value - (debit.value * debit.discount) / 100;\n            }\n\n            Object.assign(debit, { true_value });\n          });\n\n          setDebits(newDebits.data);\n        }\n      } catch (err) {\n        if (err instanceof YupValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        if (err.response) {\n          toast.error(`Erro ao pagar débito: ${err.response.data.message}`);\n        } else {\n          toast.error(\n            `Erro ao pagar débito! Por favor, tente novamente mais tarde.`,\n          );\n        }\n      } finally {\n        setLoadingSubmit(false);\n      }\n    },\n    [selectedDebit, debits, loadingSubmit, contract_id],\n  );\n\n  const handleClosePopup = useCallback(() => {\n    setSelectedDebit({} as IDebitWithVariation);\n    setPayment({} as IPayment);\n  }, []);\n\n  return (\n    <Container>\n      <Loading show={loadingPage} />\n\n      <Header />\n\n      <Aside />\n\n      <Main>\n        <Title title=\"Pagar débitos\" subtitle={`Contrato #${contract_id}`} />\n\n        <Table\n          isVoid={debits.length <= 0}\n          voidMessage=\"Não há débitos para serem pagos!\"\n        >\n          <thead>\n            <tr>\n              <td>Descrição</td>\n              <td>Valor</td>\n              <td>Valor com variação</td>\n              <td>Data limite do pagamento</td>\n              <td>Data de pagamento</td>\n            </tr>\n          </thead>\n          <tbody>\n            {debits.map(debit => (\n              <Debit\n                paid={debit.paid}\n                key={debit.id}\n                onClick={() => setSelectedDebit(debit)}\n              >\n                <td>{debit.description}</td>\n                <td>{formatCoin(debit.value)}</td>\n                <td>\n                  {debit.true_value\n                    ? formatCoin(debit.true_value)\n                    : debit.value}\n                </td>\n                <td>{prettyDate(debit.payment_limit_date)}</td>\n                <td>{debit.payday ? prettyDate(debit.payday) : '-'}</td>\n              </Debit>\n            ))}\n          </tbody>\n        </Table>\n\n        {!!selectedDebit.id && (\n          <Popup\n            title={`Débito: ${\n              selectedDebit.true_value\n                ? formatCoin(selectedDebit.true_value)\n                : formatCoin(selectedDebit.value)\n            }`}\n            handleClosePopup={handleClosePopup}\n          >\n            {!payment.id && !selectedDebit.paid && (\n              <Form ref={formRef} onSubmit={handlePayDebit}>\n                <InputGroup>\n                  <Select\n                    name=\"method\"\n                    icon={FiDollarSign}\n                    optionsArray={paymentMethods}\n                  />\n                </InputGroup>\n\n                <Button type=\"submit\" loading={loadingSubmit}>\n                  Pagar\n                </Button>\n              </Form>\n            )}\n\n            {(payment.receipt_url ||\n              (selectedDebit.payment && selectedDebit.payment.receipt_url)) && (\n              <Document\n                name=\"Recibo\"\n                link={\n                  payment.receipt_url || selectedDebit.payment.receipt_url || ''\n                }\n              />\n            )}\n          </Popup>\n        )}\n      </Main>\n    </Container>\n  );\n};\n\nexport default Debits;\n"]},"metadata":{},"sourceType":"module"}