{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/main/new_frontend/src/components/GradesList/index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Link } from 'react-router-dom';\nimport { Container, GradesContainer } from './styles';\nimport Loading from '../Loading';\nimport api from '../../services/api';\n\nconst GradesList = ({\n  toPageAfterSelect\n}) => {\n  const [loadingPage, setLoadingPage] = useState(true);\n  const [grades, setGrades] = useState([]);\n  useEffect(() => {\n    api.get('/grades').then(response => {\n      const gradesFromApi = response.data;\n      setGrades(gradesFromApi);\n    }).catch(() => {\n      toast.error('Erro ao carregar dados doservidor! Por favor, tente novamente mais tarde.');\n    }).finally(() => {\n      setLoadingPage(false);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Loading, {\n    show: loadingPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GradesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, grades.map(grade => /*#__PURE__*/React.createElement(Link, {\n    to: `${toPageAfterSelect}/${grade.id}`,\n    key: grade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, `${grade.name} - ${grade.year}`))));\n};\n\nexport default GradesList;","map":{"version":3,"sources":["/home/ondaniel/santiago/main/new_frontend/src/components/GradesList/index.tsx"],"names":["React","useEffect","useState","toast","Link","Container","GradesContainer","Loading","api","GradesList","toPageAfterSelect","loadingPage","setLoadingPage","grades","setGrades","get","then","response","gradesFromApi","data","catch","error","finally","map","grade","id","name","year"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,UAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;;AAMA,MAAMC,UAA4B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AAC9D,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAW,EAAX,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,GAAG,CACAO,GADH,CACO,SADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMC,aAAa,GAAGD,QAAQ,CAACE,IAA/B;AAEAL,MAAAA,SAAS,CAACI,aAAD,CAAT;AACD,KANH,EAOGE,KAPH,CAOS,MAAM;AACXjB,MAAAA,KAAK,CAACkB,KAAN,CACE,2EADF;AAGD,KAXH,EAYGC,OAZH,CAYW,MAAM;AACbV,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAED,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,MAAM,CAACU,GAAP,CAAWC,KAAK,iBACf,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG,GAAEd,iBAAkB,IAAGc,KAAK,CAACC,EAAG,EAA3C;AAA8C,IAAA,GAAG,EAAED,KAAK,CAACC,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAED,KAAK,CAACE,IAAK,MAAKF,KAAK,CAACG,IAAK,EADjC,CADD,CADH,CAHF,CADF;AAaD,CAnCD;;AAqCA,eAAelB,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Link } from 'react-router-dom';\n\nimport { Container, GradesContainer } from './styles';\nimport Loading from '../Loading';\nimport IGrade from '../../entities/IGrade';\nimport api from '../../services/api';\n\ninterface IProps {\n  toPageAfterSelect: string;\n}\n\nconst GradesList: React.FC<IProps> = ({ toPageAfterSelect }) => {\n  const [loadingPage, setLoadingPage] = useState(true);\n  const [grades, setGrades] = useState<IGrade[]>([]);\n\n  useEffect(() => {\n    api\n      .get('/grades')\n      .then(response => {\n        const gradesFromApi = response.data as IGrade[];\n\n        setGrades(gradesFromApi);\n      })\n      .catch(() => {\n        toast.error(\n          'Erro ao carregar dados doservidor! Por favor, tente novamente mais tarde.',\n        );\n      })\n      .finally(() => {\n        setLoadingPage(false);\n      });\n  }, []);\n\n  return (\n    <Container>\n      <Loading show={loadingPage} />\n\n      <GradesContainer>\n        {grades.map(grade => (\n          <Link to={`${toPageAfterSelect}/${grade.id}`} key={grade.id}>\n            {`${grade.name} - ${grade.year}`}\n          </Link>\n        ))}\n      </GradesContainer>\n    </Container>\n  );\n};\n\nexport default GradesList;\n"]},"metadata":{},"sourceType":"module"}