{"ast":null,"code":"import * as Yup from 'yup';\nexport default Yup.object().shape({\n  name: Yup.string().required('Nome obrigatório'),\n  birth_date: Yup.date().typeError('Data de aniversário inválida').required('Data de nascimento obrigatória'),\n  nacionality: Yup.string().required('Nacionalidade obrigatória'),\n  civil_state: Yup.string().required('Estado civil obrigatório'),\n  profission: Yup.string().required('Profissão obrigatória'),\n  cpf: Yup.string().required('CPF obrigatório'),\n  rg: Yup.string().required('RG obrigatório'),\n  address_street: Yup.string().required('Rua obrigatória'),\n  address_number: Yup.number().required('Número obrigatório'),\n  address_complement: Yup.string(),\n  address_neighborhood: Yup.string().required('Bairro obrigatório'),\n  address_city: Yup.string().required('Cidade obrigatória'),\n  address_cep: Yup.string().required('CEP obrigatório'),\n  residencial_phone: Yup.string().required('Telefone residencial obrigatório'),\n  commercial_phone: Yup.string().required('Telefone comercial obrigatório'),\n  personal_phone: Yup.string().required('Telefone pessoal obrigatório'),\n  education_level: Yup.string().matches(/(elementary_incompleted|elementary_completed|highschool_incompleted|highschool_completed|university_incompleted|university_completed)/),\n  workplace: Yup.string().required('Local de trabalho obrigatório'),\n  monthly_income: Yup.number().typeError('Renda mensal inválida').required('Renda mensal obrigatória'),\n  income_tax: Yup.boolean().typeError(() => 'Declaração de imposto de renda inválida'),\n  email: Yup.string().email('E-mail inválido').required('E-mail obrigatório'),\n  kinship: Yup.string().required('Parentesco obrigatório')\n});","map":{"version":3,"sources":["/home/ondaniel/santiago/main/new_frontend/src/schemas/responsibleSchema.ts"],"names":["Yup","object","shape","name","string","required","birth_date","date","typeError","nacionality","civil_state","profission","cpf","rg","address_street","address_number","number","address_complement","address_neighborhood","address_city","address_cep","residencial_phone","commercial_phone","personal_phone","education_level","matches","workplace","monthly_income","income_tax","boolean","email","kinship"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,eAAeA,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,EAAAA,IAAI,EAAEH,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAD0B;AAEhCC,EAAAA,UAAU,EAAEN,GAAG,CAACO,IAAJ,GACTC,SADS,CACC,8BADD,EAETH,QAFS,CAEA,gCAFA,CAFoB;AAKhCI,EAAAA,WAAW,EAAET,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CALmB;AAMhCK,EAAAA,WAAW,EAAEV,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CANmB;AAOhCM,EAAAA,UAAU,EAAEX,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,uBAAtB,CAPoB;AAQhCO,EAAAA,GAAG,EAAEZ,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,iBAAtB,CAR2B;AAShCQ,EAAAA,EAAE,EAAEb,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,gBAAtB,CAT4B;AAUhCS,EAAAA,cAAc,EAAEd,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,iBAAtB,CAVgB;AAWhCU,EAAAA,cAAc,EAAEf,GAAG,CAACgB,MAAJ,GAAaX,QAAb,CAAsB,oBAAtB,CAXgB;AAYhCY,EAAAA,kBAAkB,EAAEjB,GAAG,CAACI,MAAJ,EAZY;AAahCc,EAAAA,oBAAoB,EAAElB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAbU;AAchCc,EAAAA,YAAY,EAAEnB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAdkB;AAehCe,EAAAA,WAAW,EAAEpB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,iBAAtB,CAfmB;AAgBhCgB,EAAAA,iBAAiB,EAAErB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,kCAAtB,CAhBa;AAiBhCiB,EAAAA,gBAAgB,EAAEtB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,gCAAtB,CAjBc;AAkBhCkB,EAAAA,cAAc,EAAEvB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,8BAAtB,CAlBgB;AAmBhCmB,EAAAA,eAAe,EAAExB,GAAG,CAACI,MAAJ,GAAaqB,OAAb,CACf,uIADe,CAnBe;AAsBhCC,EAAAA,SAAS,EAAE1B,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,+BAAtB,CAtBqB;AAuBhCsB,EAAAA,cAAc,EAAE3B,GAAG,CAACgB,MAAJ,GACbR,SADa,CACH,uBADG,EAEbH,QAFa,CAEJ,0BAFI,CAvBgB;AA0BhCuB,EAAAA,UAAU,EAAE5B,GAAG,CAAC6B,OAAJ,GAAcrB,SAAd,CACV,MAAM,yCADI,CA1BoB;AA6BhCsB,EAAAA,KAAK,EAAE9B,GAAG,CAACI,MAAJ,GAAa0B,KAAb,CAAmB,iBAAnB,EAAsCzB,QAAtC,CAA+C,oBAA/C,CA7ByB;AA8BhC0B,EAAAA,OAAO,EAAE/B,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB;AA9BuB,CAAnB,CAAf","sourcesContent":["import * as Yup from 'yup';\n\nexport default Yup.object().shape({\n  name: Yup.string().required('Nome obrigatório'),\n  birth_date: Yup.date()\n    .typeError('Data de aniversário inválida')\n    .required('Data de nascimento obrigatória'),\n  nacionality: Yup.string().required('Nacionalidade obrigatória'),\n  civil_state: Yup.string().required('Estado civil obrigatório'),\n  profission: Yup.string().required('Profissão obrigatória'),\n  cpf: Yup.string().required('CPF obrigatório'),\n  rg: Yup.string().required('RG obrigatório'),\n  address_street: Yup.string().required('Rua obrigatória'),\n  address_number: Yup.number().required('Número obrigatório'),\n  address_complement: Yup.string(),\n  address_neighborhood: Yup.string().required('Bairro obrigatório'),\n  address_city: Yup.string().required('Cidade obrigatória'),\n  address_cep: Yup.string().required('CEP obrigatório'),\n  residencial_phone: Yup.string().required('Telefone residencial obrigatório'),\n  commercial_phone: Yup.string().required('Telefone comercial obrigatório'),\n  personal_phone: Yup.string().required('Telefone pessoal obrigatório'),\n  education_level: Yup.string().matches(\n    /(elementary_incompleted|elementary_completed|highschool_incompleted|highschool_completed|university_incompleted|university_completed)/,\n  ),\n  workplace: Yup.string().required('Local de trabalho obrigatório'),\n  monthly_income: Yup.number()\n    .typeError('Renda mensal inválida')\n    .required('Renda mensal obrigatória'),\n  income_tax: Yup.boolean().typeError(\n    () => 'Declaração de imposto de renda inválida',\n  ),\n  email: Yup.string().email('E-mail inválido').required('E-mail obrigatório'),\n  kinship: Yup.string().required('Parentesco obrigatório'),\n});\n"]},"metadata":{},"sourceType":"module"}