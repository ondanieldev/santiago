{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/sisgie-frontend/src/components/InputMask/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport ReactInputMask from 'react-input-mask';\nimport { Container, InputContainer, Error } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  autoComplete = 'off',\n  id,\n  label,\n  maskType,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    error,\n    registerField\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isErrored, setIsErrored] = useState(false);\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n    setIsErrored(false);\n  }, []);\n  const handleBlur = useCallback(e => {\n    setIsFocused(false);\n    setIsFilled(!!e.target.value);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n\n      // path: 'value',\n      getValue(ref) {\n        switch (maskType) {\n          case 'cpf':\n            return ref.value.replace(/[^0-9]+/g, '');\n\n          case 'cep':\n            return ref.value.replace(/[^0-9]+/g, '');\n\n          case 'percent':\n            return ref.value.replace(/[^0-9]+/g, '');\n\n          default:\n            return ref.value;\n        }\n      },\n\n      setValue(ref, value) {\n        ref.setInputValue(value);\n      },\n\n      clearValue(ref) {\n        ref.setInputValue('');\n      }\n\n    });\n  }, [fieldName, inputRef, registerField, maskType]);\n  useEffect(() => {\n    setIsErrored(!!error);\n  }, [error]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, label && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, label), /*#__PURE__*/React.createElement(InputContainer, {\n    isErrored: isErrored,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(ReactInputMask, Object.assign({\n    autoComplete: autoComplete,\n    onFocus: handleFocus,\n    onBlur: e => handleBlur(e),\n    name: name,\n    ref: inputRef,\n    id: id\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  })), isErrored && error && /*#__PURE__*/React.createElement(Error, {\n    title: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#f44336\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/ondaniel/santiago/sisgie-frontend/src/components/InputMask/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","ReactInputMask","Container","InputContainer","Error","Input","name","icon","Icon","autoComplete","id","label","maskType","rest","inputRef","fieldName","error","registerField","isFocused","setIsFocused","isFilled","setIsFilled","isErrored","setIsErrored","handleFocus","handleBlur","e","target","value","ref","current","getValue","replace","setValue","setInputValue","clearValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport ReactInputMask, { Props as InputProps } from 'react-input-mask';\n\nimport { Container, InputContainer, Error } from './styles';\n\ninterface Props extends InputProps {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n  search?: boolean;\n  label?: string;\n  maskType: 'cpf' | 'cep' | 'percent';\n}\n\nconst Input: React.FC<Props> = ({\n  name,\n  icon: Icon,\n  autoComplete = 'off',\n  id,\n  label,\n  maskType,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n\n  const { fieldName, error, registerField } = useField(name);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const [isErrored, setIsErrored] = useState(false);\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n    setIsErrored(false);\n  }, []);\n\n  const handleBlur = useCallback(e => {\n    setIsFocused(false);\n    setIsFilled(!!e.target.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      // path: 'value',\n      getValue(ref: any) {\n        switch (maskType) {\n          case 'cpf':\n            return ref.value.replace(/[^0-9]+/g, '');\n          case 'cep':\n            return ref.value.replace(/[^0-9]+/g, '');\n          case 'percent':\n            return ref.value.replace(/[^0-9]+/g, '');\n          default:\n            return ref.value;\n        }\n      },\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue('');\n      },\n    });\n  }, [fieldName, inputRef, registerField, maskType]);\n\n  useEffect(() => {\n    setIsErrored(!!error);\n  }, [error]);\n\n  return (\n    <Container>\n      {label && <label htmlFor={id}>{label}</label>}\n      <InputContainer\n        isErrored={isErrored}\n        isFilled={isFilled}\n        isFocused={isFocused}\n      >\n        {Icon && <Icon size={20} />}\n        <ReactInputMask\n          autoComplete={autoComplete}\n          onFocus={handleFocus}\n          onBlur={e => handleBlur(e)}\n          name={name}\n          ref={inputRef}\n          id={id}\n          {...rest}\n        />\n        {isErrored && error && (\n          <Error title={error}>\n            <FiAlertCircle color=\"#f44336\" size={20} />\n          </Error>\n        )}\n      </InputContainer>\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}