{"ast":null,"code":"var _jsxFileName = \"/home/ondaniel/santiago/main/new_frontend/src/components/FileInput/index.tsx\";\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { useField } from '@unform/core';\nimport Button from '../Button';\nimport { Container, InputGroup } from './styles';\n\nconst FileInputWithPreview = ({\n  name,\n  buttonText,\n  defaultValue: inlineDefaultValue,\n  showPreview,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    registerField,\n    defaultValue\n  } = useField(name);\n  const [preview, setPreview] = useState(defaultValue || inlineDefaultValue);\n  const [filename, setFilename] = useState('Nenhum arquivo selecionado');\n  const handlePreview = useCallback(e => {\n    var _e$target$files;\n\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n\n    if (!file) {\n      setPreview(null);\n      setFilename('Nenhum arquivo selecionado');\n    } else {\n      const previewURL = URL.createObjectURL(file);\n      setPreview(previewURL);\n      setFilename(file.name);\n    }\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'files[0]',\n\n      clearValue(ref) {\n        ref.value = '';\n        setPreview(null);\n      },\n\n      setValue(_, value) {\n        setPreview(value);\n        setFilename('');\n      }\n\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, preview && showPreview && /*#__PURE__*/React.createElement(\"a\", {\n    href: preview,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: preview,\n    alt: \"Preview\",\n    height: \"150\",\n    width: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"file\",\n    id: name,\n    name: name,\n    ref: inputRef,\n    onChange: handlePreview\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    backgroundColor: \"#CED4DA\",\n    color: \"#212529\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, buttonText)), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, filename)));\n};\n\nexport default FileInputWithPreview;","map":{"version":3,"sources":["/home/ondaniel/santiago/main/new_frontend/src/components/FileInput/index.tsx"],"names":["React","useRef","useEffect","useCallback","useState","useField","Button","Container","InputGroup","FileInputWithPreview","name","buttonText","defaultValue","inlineDefaultValue","showPreview","rest","inputRef","fieldName","registerField","preview","setPreview","filename","setFilename","handlePreview","e","file","target","files","previewURL","URL","createObjectURL","ref","current","path","clearValue","value","setValue","_"],"mappings":"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","sourcesContent":["import React, {\n  ChangeEvent,\n  useRef,\n  useEffect,\n  useCallback,\n  useState,\n} from 'react';\nimport { useField } from '@unform/core';\n\nimport Button from '../Button';\nimport { Container, InputGroup } from './styles';\n\ninterface Props {\n  name: string;\n  buttonText: string;\n  showPreview?: boolean;\n}\n\ntype InputProps = JSX.IntrinsicElements['input'] & Props;\n\nconst FileInputWithPreview: React.FC<InputProps> = ({\n  name,\n  buttonText,\n  defaultValue: inlineDefaultValue,\n  showPreview,\n  ...rest\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, registerField, defaultValue } = useField(name);\n\n  const [preview, setPreview] = useState(defaultValue || inlineDefaultValue);\n  const [filename, setFilename] = useState('Nenhum arquivo selecionado');\n\n  const handlePreview = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n\n    if (!file) {\n      setPreview(null);\n      setFilename('Nenhum arquivo selecionado');\n    } else {\n      const previewURL = URL.createObjectURL(file);\n      setPreview(previewURL);\n      setFilename(file.name);\n    }\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'files[0]',\n      clearValue(ref: HTMLInputElement) {\n        ref.value = '';\n        setPreview(null);\n      },\n      setValue(_: HTMLInputElement, value: string) {\n        setPreview(value);\n        setFilename('');\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container>\n      {preview && showPreview && (\n        <a href={preview} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={preview} alt=\"Preview\" height=\"150\" width=\"150\" />\n        </a>\n      )}\n      <InputGroup>\n        <input\n          type=\"file\"\n          id={name}\n          name={name}\n          ref={inputRef}\n          onChange={handlePreview}\n          {...rest}\n        />\n        <Button type=\"button\" backgroundColor=\"#CED4DA\" color=\"#212529\">\n          <label htmlFor={name}>{buttonText}</label>\n        </Button>\n        <span>{filename}</span>\n      </InputGroup>\n    </Container>\n  );\n};\n\nexport default FileInputWithPreview;\n"]},"metadata":{},"sourceType":"module"}