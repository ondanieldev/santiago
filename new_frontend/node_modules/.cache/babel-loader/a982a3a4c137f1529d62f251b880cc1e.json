{"ast":null,"code":"import*as Yup from'yup';export default Yup.object().shape({name:Yup.string().required('Nome não informado'),father_name:Yup.string().required('Nome do pai não informado'),mother_name:Yup.string().required('Nome da mãe não informado'),birth_date:Yup.date().typeError('Data de aniversário inválida').required('Data de aniversário informada'),nacionality:Yup.string().required('Nacionalidade não informada'),birth_city:Yup.string().required('Cidade natal não informada'),birth_state:Yup.string().required('Estado natal não informado'),gender:Yup.string().matches(/(male|female)/,function(){return'Gênero inválido';}),race:Yup.string().matches(/(white|brown|black|indigenous|yellow)/,function(){return'Raça inválida';}),ease_relating:Yup.boolean().required('Facilidade em se relacionar não informada'),origin_school:Yup.string(),healt_plan:Yup.string(),food_alergy:Yup.string(),medication_alergy:Yup.string(),health_problem:Yup.string(),special_necessities:Yup.string()});","map":{"version":3,"sources":["/home/ondaniel/santiago/sisgie/new_frontend/src/schemas/studentSchema.ts"],"names":["Yup","object","shape","name","string","required","father_name","mother_name","birth_date","date","typeError","nacionality","birth_city","birth_state","gender","matches","race","ease_relating","boolean","origin_school","healt_plan","food_alergy","medication_alergy","health_problem","special_necessities"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,KAArB,CAEA,cAAeA,CAAAA,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB,CAChCC,IAAI,CAAEH,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAD0B,CAEhCC,WAAW,CAAEN,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAFmB,CAGhCE,WAAW,CAAEP,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAHmB,CAIhCG,UAAU,CAAER,GAAG,CAACS,IAAJ,GACTC,SADS,CACC,8BADD,EAETL,QAFS,CAEA,+BAFA,CAJoB,CAOhCM,WAAW,CAAEX,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,6BAAtB,CAPmB,CAQhCO,UAAU,CAAEZ,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB,CARoB,CAShCQ,WAAW,CAAEb,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB,CATmB,CAUhCS,MAAM,CAAEd,GAAG,CAACI,MAAJ,GAAaW,OAAb,CAAqB,eAArB,CAAsC,iBAAM,iBAAN,EAAtC,CAVwB,CAWhCC,IAAI,CAAEhB,GAAG,CAACI,MAAJ,GAAaW,OAAb,CACJ,uCADI,CAEJ,iBAAM,eAAN,EAFI,CAX0B,CAehCE,aAAa,CAAEjB,GAAG,CAACkB,OAAJ,GAAcb,QAAd,CACb,2CADa,CAfiB,CAkBhCc,aAAa,CAAEnB,GAAG,CAACI,MAAJ,EAlBiB,CAmBhCgB,UAAU,CAAEpB,GAAG,CAACI,MAAJ,EAnBoB,CAoBhCiB,WAAW,CAAErB,GAAG,CAACI,MAAJ,EApBmB,CAqBhCkB,iBAAiB,CAAEtB,GAAG,CAACI,MAAJ,EArBa,CAsBhCmB,cAAc,CAAEvB,GAAG,CAACI,MAAJ,EAtBgB,CAuBhCoB,mBAAmB,CAAExB,GAAG,CAACI,MAAJ,EAvBW,CAAnB,CAAf","sourcesContent":["import * as Yup from 'yup';\n\nexport default Yup.object().shape({\n  name: Yup.string().required('Nome não informado'),\n  father_name: Yup.string().required('Nome do pai não informado'),\n  mother_name: Yup.string().required('Nome da mãe não informado'),\n  birth_date: Yup.date()\n    .typeError('Data de aniversário inválida')\n    .required('Data de aniversário informada'),\n  nacionality: Yup.string().required('Nacionalidade não informada'),\n  birth_city: Yup.string().required('Cidade natal não informada'),\n  birth_state: Yup.string().required('Estado natal não informado'),\n  gender: Yup.string().matches(/(male|female)/, () => 'Gênero inválido'),\n  race: Yup.string().matches(\n    /(white|brown|black|indigenous|yellow)/,\n    () => 'Raça inválida',\n  ),\n  ease_relating: Yup.boolean().required(\n    'Facilidade em se relacionar não informada',\n  ),\n  origin_school: Yup.string(),\n  healt_plan: Yup.string(),\n  food_alergy: Yup.string(),\n  medication_alergy: Yup.string(),\n  health_problem: Yup.string(),\n  special_necessities: Yup.string(),\n});\n"]},"metadata":{},"sourceType":"module"}